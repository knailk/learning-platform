// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knailk/learning-platform/app/domain/entity"
)

func newLesson(db *gorm.DB, opts ...gen.DOOption) lesson {
	_lesson := lesson{}

	_lesson.lessonDo.UseDB(db, opts...)
	_lesson.lessonDo.UseModel(&entity.Lesson{})

	tableName := _lesson.lessonDo.TableName()
	_lesson.ALL = field.NewAsterisk(tableName)
	_lesson.ID = field.NewField(tableName, "id")
	_lesson.ChapterID = field.NewField(tableName, "chapter_id")
	_lesson.Name = field.NewString(tableName, "name")
	_lesson.Type = field.NewString(tableName, "type")
	_lesson.Level = field.NewInt(tableName, "level")
	_lesson.Score = field.NewInt(tableName, "score")
	_lesson.UpdatedAt = field.NewTime(tableName, "updated_at")
	_lesson.CreatedAt = field.NewTime(tableName, "created_at")
	_lesson.Questions = lessonHasManyQuestions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Questions", "entity.Question"),
	}

	_lesson.Lectures = lessonHasManyLectures{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Lectures", "entity.Lecture"),
	}

	_lesson.fillFieldMap()

	return _lesson
}

type lesson struct {
	lessonDo lessonDo

	ALL       field.Asterisk
	ID        field.Field
	ChapterID field.Field
	Name      field.String
	Type      field.String
	Level     field.Int
	Score     field.Int
	UpdatedAt field.Time
	CreatedAt field.Time
	Questions lessonHasManyQuestions

	Lectures lessonHasManyLectures

	fieldMap map[string]field.Expr
}

func (l lesson) Table(newTableName string) *lesson {
	l.lessonDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lesson) As(alias string) *lesson {
	l.lessonDo.DO = *(l.lessonDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lesson) updateTableName(table string) *lesson {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewField(table, "id")
	l.ChapterID = field.NewField(table, "chapter_id")
	l.Name = field.NewString(table, "name")
	l.Type = field.NewString(table, "type")
	l.Level = field.NewInt(table, "level")
	l.Score = field.NewInt(table, "score")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.CreatedAt = field.NewTime(table, "created_at")

	l.fillFieldMap()

	return l
}

func (l *lesson) WithContext(ctx context.Context) ILessonDo { return l.lessonDo.WithContext(ctx) }

func (l lesson) TableName() string { return l.lessonDo.TableName() }

func (l lesson) Alias() string { return l.lessonDo.Alias() }

func (l lesson) Columns(cols ...field.Expr) gen.Columns { return l.lessonDo.Columns(cols...) }

func (l *lesson) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lesson) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["id"] = l.ID
	l.fieldMap["chapter_id"] = l.ChapterID
	l.fieldMap["name"] = l.Name
	l.fieldMap["type"] = l.Type
	l.fieldMap["level"] = l.Level
	l.fieldMap["score"] = l.Score
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["created_at"] = l.CreatedAt

}

func (l lesson) clone(db *gorm.DB) lesson {
	l.lessonDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lesson) replaceDB(db *gorm.DB) lesson {
	l.lessonDo.ReplaceDB(db)
	return l
}

type lessonHasManyQuestions struct {
	db *gorm.DB

	field.RelationField
}

func (a lessonHasManyQuestions) Where(conds ...field.Expr) *lessonHasManyQuestions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a lessonHasManyQuestions) WithContext(ctx context.Context) *lessonHasManyQuestions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a lessonHasManyQuestions) Session(session *gorm.Session) *lessonHasManyQuestions {
	a.db = a.db.Session(session)
	return &a
}

func (a lessonHasManyQuestions) Model(m *entity.Lesson) *lessonHasManyQuestionsTx {
	return &lessonHasManyQuestionsTx{a.db.Model(m).Association(a.Name())}
}

type lessonHasManyQuestionsTx struct{ tx *gorm.Association }

func (a lessonHasManyQuestionsTx) Find() (result []*entity.Question, err error) {
	return result, a.tx.Find(&result)
}

func (a lessonHasManyQuestionsTx) Append(values ...*entity.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a lessonHasManyQuestionsTx) Replace(values ...*entity.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a lessonHasManyQuestionsTx) Delete(values ...*entity.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a lessonHasManyQuestionsTx) Clear() error {
	return a.tx.Clear()
}

func (a lessonHasManyQuestionsTx) Count() int64 {
	return a.tx.Count()
}

type lessonHasManyLectures struct {
	db *gorm.DB

	field.RelationField
}

func (a lessonHasManyLectures) Where(conds ...field.Expr) *lessonHasManyLectures {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a lessonHasManyLectures) WithContext(ctx context.Context) *lessonHasManyLectures {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a lessonHasManyLectures) Session(session *gorm.Session) *lessonHasManyLectures {
	a.db = a.db.Session(session)
	return &a
}

func (a lessonHasManyLectures) Model(m *entity.Lesson) *lessonHasManyLecturesTx {
	return &lessonHasManyLecturesTx{a.db.Model(m).Association(a.Name())}
}

type lessonHasManyLecturesTx struct{ tx *gorm.Association }

func (a lessonHasManyLecturesTx) Find() (result []*entity.Lecture, err error) {
	return result, a.tx.Find(&result)
}

func (a lessonHasManyLecturesTx) Append(values ...*entity.Lecture) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a lessonHasManyLecturesTx) Replace(values ...*entity.Lecture) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a lessonHasManyLecturesTx) Delete(values ...*entity.Lecture) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a lessonHasManyLecturesTx) Clear() error {
	return a.tx.Clear()
}

func (a lessonHasManyLecturesTx) Count() int64 {
	return a.tx.Count()
}

type lessonDo struct{ gen.DO }

type ILessonDo interface {
	gen.SubQuery
	Debug() ILessonDo
	WithContext(ctx context.Context) ILessonDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILessonDo
	WriteDB() ILessonDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILessonDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILessonDo
	Not(conds ...gen.Condition) ILessonDo
	Or(conds ...gen.Condition) ILessonDo
	Select(conds ...field.Expr) ILessonDo
	Where(conds ...gen.Condition) ILessonDo
	Order(conds ...field.Expr) ILessonDo
	Distinct(cols ...field.Expr) ILessonDo
	Omit(cols ...field.Expr) ILessonDo
	Join(table schema.Tabler, on ...field.Expr) ILessonDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILessonDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILessonDo
	Group(cols ...field.Expr) ILessonDo
	Having(conds ...gen.Condition) ILessonDo
	Limit(limit int) ILessonDo
	Offset(offset int) ILessonDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILessonDo
	Unscoped() ILessonDo
	Create(values ...*entity.Lesson) error
	CreateInBatches(values []*entity.Lesson, batchSize int) error
	Save(values ...*entity.Lesson) error
	First() (*entity.Lesson, error)
	Take() (*entity.Lesson, error)
	Last() (*entity.Lesson, error)
	Find() ([]*entity.Lesson, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Lesson, err error)
	FindInBatches(result *[]*entity.Lesson, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Lesson) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILessonDo
	Assign(attrs ...field.AssignExpr) ILessonDo
	Joins(fields ...field.RelationField) ILessonDo
	Preload(fields ...field.RelationField) ILessonDo
	FirstOrInit() (*entity.Lesson, error)
	FirstOrCreate() (*entity.Lesson, error)
	FindByPage(offset int, limit int) (result []*entity.Lesson, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILessonDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lessonDo) Debug() ILessonDo {
	return l.withDO(l.DO.Debug())
}

func (l lessonDo) WithContext(ctx context.Context) ILessonDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lessonDo) ReadDB() ILessonDo {
	return l.Clauses(dbresolver.Read)
}

func (l lessonDo) WriteDB() ILessonDo {
	return l.Clauses(dbresolver.Write)
}

func (l lessonDo) Session(config *gorm.Session) ILessonDo {
	return l.withDO(l.DO.Session(config))
}

func (l lessonDo) Clauses(conds ...clause.Expression) ILessonDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lessonDo) Returning(value interface{}, columns ...string) ILessonDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lessonDo) Not(conds ...gen.Condition) ILessonDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lessonDo) Or(conds ...gen.Condition) ILessonDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lessonDo) Select(conds ...field.Expr) ILessonDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lessonDo) Where(conds ...gen.Condition) ILessonDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lessonDo) Order(conds ...field.Expr) ILessonDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lessonDo) Distinct(cols ...field.Expr) ILessonDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lessonDo) Omit(cols ...field.Expr) ILessonDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lessonDo) Join(table schema.Tabler, on ...field.Expr) ILessonDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lessonDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILessonDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lessonDo) RightJoin(table schema.Tabler, on ...field.Expr) ILessonDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lessonDo) Group(cols ...field.Expr) ILessonDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lessonDo) Having(conds ...gen.Condition) ILessonDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lessonDo) Limit(limit int) ILessonDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lessonDo) Offset(offset int) ILessonDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lessonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILessonDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lessonDo) Unscoped() ILessonDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lessonDo) Create(values ...*entity.Lesson) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lessonDo) CreateInBatches(values []*entity.Lesson, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lessonDo) Save(values ...*entity.Lesson) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lessonDo) First() (*entity.Lesson, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Lesson), nil
	}
}

func (l lessonDo) Take() (*entity.Lesson, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Lesson), nil
	}
}

func (l lessonDo) Last() (*entity.Lesson, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Lesson), nil
	}
}

func (l lessonDo) Find() ([]*entity.Lesson, error) {
	result, err := l.DO.Find()
	return result.([]*entity.Lesson), err
}

func (l lessonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Lesson, err error) {
	buf := make([]*entity.Lesson, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lessonDo) FindInBatches(result *[]*entity.Lesson, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lessonDo) Attrs(attrs ...field.AssignExpr) ILessonDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lessonDo) Assign(attrs ...field.AssignExpr) ILessonDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lessonDo) Joins(fields ...field.RelationField) ILessonDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lessonDo) Preload(fields ...field.RelationField) ILessonDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lessonDo) FirstOrInit() (*entity.Lesson, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Lesson), nil
	}
}

func (l lessonDo) FirstOrCreate() (*entity.Lesson, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Lesson), nil
	}
}

func (l lessonDo) FindByPage(offset int, limit int) (result []*entity.Lesson, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lessonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lessonDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lessonDo) Delete(models ...*entity.Lesson) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lessonDo) withDO(do gen.Dao) *lessonDo {
	l.DO = *do.(*gen.DO)
	return l
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knailk/learning-platform/app/entity"
)

func newChapter(db *gorm.DB, opts ...gen.DOOption) chapter {
	_chapter := chapter{}

	_chapter.chapterDo.UseDB(db, opts...)
	_chapter.chapterDo.UseModel(&entity.Chapter{})

	tableName := _chapter.chapterDo.TableName()
	_chapter.ALL = field.NewAsterisk(tableName)
	_chapter.ID = field.NewField(tableName, "id")
	_chapter.Name = field.NewString(tableName, "name")
	_chapter.Description = field.NewString(tableName, "description")
	_chapter.Level = field.NewInt(tableName, "level")
	_chapter.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chapter.CreatedAt = field.NewTime(tableName, "created_at")
	_chapter.Lessons = chapterHasManyLessons{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Lessons", "entity.Lesson"),
		Questions: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Lessons.Questions", "entity.Question"),
		},
	}

	_chapter.fillFieldMap()

	return _chapter
}

type chapter struct {
	chapterDo chapterDo

	ALL         field.Asterisk
	ID          field.Field
	Name        field.String
	Description field.String
	Level       field.Int
	UpdatedAt   field.Time
	CreatedAt   field.Time
	Lessons     chapterHasManyLessons

	fieldMap map[string]field.Expr
}

func (c chapter) Table(newTableName string) *chapter {
	c.chapterDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chapter) As(alias string) *chapter {
	c.chapterDo.DO = *(c.chapterDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chapter) updateTableName(table string) *chapter {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewField(table, "id")
	c.Name = field.NewString(table, "name")
	c.Description = field.NewString(table, "description")
	c.Level = field.NewInt(table, "level")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.CreatedAt = field.NewTime(table, "created_at")

	c.fillFieldMap()

	return c
}

func (c *chapter) WithContext(ctx context.Context) IChapterDo { return c.chapterDo.WithContext(ctx) }

func (c chapter) TableName() string { return c.chapterDo.TableName() }

func (c chapter) Alias() string { return c.chapterDo.Alias() }

func (c chapter) Columns(cols ...field.Expr) gen.Columns { return c.chapterDo.Columns(cols...) }

func (c *chapter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chapter) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["description"] = c.Description
	c.fieldMap["level"] = c.Level
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["created_at"] = c.CreatedAt

}

func (c chapter) clone(db *gorm.DB) chapter {
	c.chapterDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chapter) replaceDB(db *gorm.DB) chapter {
	c.chapterDo.ReplaceDB(db)
	return c
}

type chapterHasManyLessons struct {
	db *gorm.DB

	field.RelationField

	Questions struct {
		field.RelationField
	}
}

func (a chapterHasManyLessons) Where(conds ...field.Expr) *chapterHasManyLessons {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a chapterHasManyLessons) WithContext(ctx context.Context) *chapterHasManyLessons {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a chapterHasManyLessons) Session(session *gorm.Session) *chapterHasManyLessons {
	a.db = a.db.Session(session)
	return &a
}

func (a chapterHasManyLessons) Model(m *entity.Chapter) *chapterHasManyLessonsTx {
	return &chapterHasManyLessonsTx{a.db.Model(m).Association(a.Name())}
}

type chapterHasManyLessonsTx struct{ tx *gorm.Association }

func (a chapterHasManyLessonsTx) Find() (result []*entity.Lesson, err error) {
	return result, a.tx.Find(&result)
}

func (a chapterHasManyLessonsTx) Append(values ...*entity.Lesson) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a chapterHasManyLessonsTx) Replace(values ...*entity.Lesson) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a chapterHasManyLessonsTx) Delete(values ...*entity.Lesson) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a chapterHasManyLessonsTx) Clear() error {
	return a.tx.Clear()
}

func (a chapterHasManyLessonsTx) Count() int64 {
	return a.tx.Count()
}

type chapterDo struct{ gen.DO }

type IChapterDo interface {
	gen.SubQuery
	Debug() IChapterDo
	WithContext(ctx context.Context) IChapterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChapterDo
	WriteDB() IChapterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChapterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChapterDo
	Not(conds ...gen.Condition) IChapterDo
	Or(conds ...gen.Condition) IChapterDo
	Select(conds ...field.Expr) IChapterDo
	Where(conds ...gen.Condition) IChapterDo
	Order(conds ...field.Expr) IChapterDo
	Distinct(cols ...field.Expr) IChapterDo
	Omit(cols ...field.Expr) IChapterDo
	Join(table schema.Tabler, on ...field.Expr) IChapterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChapterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChapterDo
	Group(cols ...field.Expr) IChapterDo
	Having(conds ...gen.Condition) IChapterDo
	Limit(limit int) IChapterDo
	Offset(offset int) IChapterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChapterDo
	Unscoped() IChapterDo
	Create(values ...*entity.Chapter) error
	CreateInBatches(values []*entity.Chapter, batchSize int) error
	Save(values ...*entity.Chapter) error
	First() (*entity.Chapter, error)
	Take() (*entity.Chapter, error)
	Last() (*entity.Chapter, error)
	Find() ([]*entity.Chapter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Chapter, err error)
	FindInBatches(result *[]*entity.Chapter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Chapter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChapterDo
	Assign(attrs ...field.AssignExpr) IChapterDo
	Joins(fields ...field.RelationField) IChapterDo
	Preload(fields ...field.RelationField) IChapterDo
	FirstOrInit() (*entity.Chapter, error)
	FirstOrCreate() (*entity.Chapter, error)
	FindByPage(offset int, limit int) (result []*entity.Chapter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChapterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c chapterDo) Debug() IChapterDo {
	return c.withDO(c.DO.Debug())
}

func (c chapterDo) WithContext(ctx context.Context) IChapterDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chapterDo) ReadDB() IChapterDo {
	return c.Clauses(dbresolver.Read)
}

func (c chapterDo) WriteDB() IChapterDo {
	return c.Clauses(dbresolver.Write)
}

func (c chapterDo) Session(config *gorm.Session) IChapterDo {
	return c.withDO(c.DO.Session(config))
}

func (c chapterDo) Clauses(conds ...clause.Expression) IChapterDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chapterDo) Returning(value interface{}, columns ...string) IChapterDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chapterDo) Not(conds ...gen.Condition) IChapterDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chapterDo) Or(conds ...gen.Condition) IChapterDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chapterDo) Select(conds ...field.Expr) IChapterDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chapterDo) Where(conds ...gen.Condition) IChapterDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chapterDo) Order(conds ...field.Expr) IChapterDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chapterDo) Distinct(cols ...field.Expr) IChapterDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chapterDo) Omit(cols ...field.Expr) IChapterDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chapterDo) Join(table schema.Tabler, on ...field.Expr) IChapterDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chapterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChapterDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chapterDo) RightJoin(table schema.Tabler, on ...field.Expr) IChapterDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chapterDo) Group(cols ...field.Expr) IChapterDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chapterDo) Having(conds ...gen.Condition) IChapterDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chapterDo) Limit(limit int) IChapterDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chapterDo) Offset(offset int) IChapterDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chapterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChapterDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chapterDo) Unscoped() IChapterDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chapterDo) Create(values ...*entity.Chapter) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chapterDo) CreateInBatches(values []*entity.Chapter, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chapterDo) Save(values ...*entity.Chapter) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chapterDo) First() (*entity.Chapter, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Chapter), nil
	}
}

func (c chapterDo) Take() (*entity.Chapter, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Chapter), nil
	}
}

func (c chapterDo) Last() (*entity.Chapter, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Chapter), nil
	}
}

func (c chapterDo) Find() ([]*entity.Chapter, error) {
	result, err := c.DO.Find()
	return result.([]*entity.Chapter), err
}

func (c chapterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Chapter, err error) {
	buf := make([]*entity.Chapter, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chapterDo) FindInBatches(result *[]*entity.Chapter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chapterDo) Attrs(attrs ...field.AssignExpr) IChapterDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chapterDo) Assign(attrs ...field.AssignExpr) IChapterDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chapterDo) Joins(fields ...field.RelationField) IChapterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chapterDo) Preload(fields ...field.RelationField) IChapterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chapterDo) FirstOrInit() (*entity.Chapter, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Chapter), nil
	}
}

func (c chapterDo) FirstOrCreate() (*entity.Chapter, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Chapter), nil
	}
}

func (c chapterDo) FindByPage(offset int, limit int) (result []*entity.Chapter, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chapterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chapterDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chapterDo) Delete(models ...*entity.Chapter) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chapterDo) withDO(do gen.Dao) *chapterDo {
	c.DO = *do.(*gen.DO)
	return c
}

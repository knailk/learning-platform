// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knailk/learning-platform/app/domain/entity"
)

func newSolution(db *gorm.DB, opts ...gen.DOOption) solution {
	_solution := solution{}

	_solution.solutionDo.UseDB(db, opts...)
	_solution.solutionDo.UseModel(&entity.Solution{})

	tableName := _solution.solutionDo.TableName()
	_solution.ALL = field.NewAsterisk(tableName)
	_solution.ID = field.NewField(tableName, "id")
	_solution.ProblemID = field.NewField(tableName, "problem_id")
	_solution.Code = field.NewString(tableName, "code")
	_solution.Language = field.NewString(tableName, "language")
	_solution.UpdatedAt = field.NewTime(tableName, "updated_at")
	_solution.CreatedAt = field.NewTime(tableName, "created_at")

	_solution.fillFieldMap()

	return _solution
}

type solution struct {
	solutionDo solutionDo

	ALL       field.Asterisk
	ID        field.Field
	ProblemID field.Field
	Code      field.String
	Language  field.String
	UpdatedAt field.Time
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s solution) Table(newTableName string) *solution {
	s.solutionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s solution) As(alias string) *solution {
	s.solutionDo.DO = *(s.solutionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *solution) updateTableName(table string) *solution {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.ProblemID = field.NewField(table, "problem_id")
	s.Code = field.NewString(table, "code")
	s.Language = field.NewString(table, "language")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *solution) WithContext(ctx context.Context) ISolutionDo { return s.solutionDo.WithContext(ctx) }

func (s solution) TableName() string { return s.solutionDo.TableName() }

func (s solution) Alias() string { return s.solutionDo.Alias() }

func (s solution) Columns(cols ...field.Expr) gen.Columns { return s.solutionDo.Columns(cols...) }

func (s *solution) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *solution) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["problem_id"] = s.ProblemID
	s.fieldMap["code"] = s.Code
	s.fieldMap["language"] = s.Language
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s solution) clone(db *gorm.DB) solution {
	s.solutionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s solution) replaceDB(db *gorm.DB) solution {
	s.solutionDo.ReplaceDB(db)
	return s
}

type solutionDo struct{ gen.DO }

type ISolutionDo interface {
	gen.SubQuery
	Debug() ISolutionDo
	WithContext(ctx context.Context) ISolutionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISolutionDo
	WriteDB() ISolutionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISolutionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISolutionDo
	Not(conds ...gen.Condition) ISolutionDo
	Or(conds ...gen.Condition) ISolutionDo
	Select(conds ...field.Expr) ISolutionDo
	Where(conds ...gen.Condition) ISolutionDo
	Order(conds ...field.Expr) ISolutionDo
	Distinct(cols ...field.Expr) ISolutionDo
	Omit(cols ...field.Expr) ISolutionDo
	Join(table schema.Tabler, on ...field.Expr) ISolutionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISolutionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISolutionDo
	Group(cols ...field.Expr) ISolutionDo
	Having(conds ...gen.Condition) ISolutionDo
	Limit(limit int) ISolutionDo
	Offset(offset int) ISolutionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISolutionDo
	Unscoped() ISolutionDo
	Create(values ...*entity.Solution) error
	CreateInBatches(values []*entity.Solution, batchSize int) error
	Save(values ...*entity.Solution) error
	First() (*entity.Solution, error)
	Take() (*entity.Solution, error)
	Last() (*entity.Solution, error)
	Find() ([]*entity.Solution, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Solution, err error)
	FindInBatches(result *[]*entity.Solution, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Solution) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISolutionDo
	Assign(attrs ...field.AssignExpr) ISolutionDo
	Joins(fields ...field.RelationField) ISolutionDo
	Preload(fields ...field.RelationField) ISolutionDo
	FirstOrInit() (*entity.Solution, error)
	FirstOrCreate() (*entity.Solution, error)
	FindByPage(offset int, limit int) (result []*entity.Solution, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISolutionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s solutionDo) Debug() ISolutionDo {
	return s.withDO(s.DO.Debug())
}

func (s solutionDo) WithContext(ctx context.Context) ISolutionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s solutionDo) ReadDB() ISolutionDo {
	return s.Clauses(dbresolver.Read)
}

func (s solutionDo) WriteDB() ISolutionDo {
	return s.Clauses(dbresolver.Write)
}

func (s solutionDo) Session(config *gorm.Session) ISolutionDo {
	return s.withDO(s.DO.Session(config))
}

func (s solutionDo) Clauses(conds ...clause.Expression) ISolutionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s solutionDo) Returning(value interface{}, columns ...string) ISolutionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s solutionDo) Not(conds ...gen.Condition) ISolutionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s solutionDo) Or(conds ...gen.Condition) ISolutionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s solutionDo) Select(conds ...field.Expr) ISolutionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s solutionDo) Where(conds ...gen.Condition) ISolutionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s solutionDo) Order(conds ...field.Expr) ISolutionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s solutionDo) Distinct(cols ...field.Expr) ISolutionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s solutionDo) Omit(cols ...field.Expr) ISolutionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s solutionDo) Join(table schema.Tabler, on ...field.Expr) ISolutionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s solutionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISolutionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s solutionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISolutionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s solutionDo) Group(cols ...field.Expr) ISolutionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s solutionDo) Having(conds ...gen.Condition) ISolutionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s solutionDo) Limit(limit int) ISolutionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s solutionDo) Offset(offset int) ISolutionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s solutionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISolutionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s solutionDo) Unscoped() ISolutionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s solutionDo) Create(values ...*entity.Solution) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s solutionDo) CreateInBatches(values []*entity.Solution, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s solutionDo) Save(values ...*entity.Solution) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s solutionDo) First() (*entity.Solution, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Solution), nil
	}
}

func (s solutionDo) Take() (*entity.Solution, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Solution), nil
	}
}

func (s solutionDo) Last() (*entity.Solution, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Solution), nil
	}
}

func (s solutionDo) Find() ([]*entity.Solution, error) {
	result, err := s.DO.Find()
	return result.([]*entity.Solution), err
}

func (s solutionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Solution, err error) {
	buf := make([]*entity.Solution, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s solutionDo) FindInBatches(result *[]*entity.Solution, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s solutionDo) Attrs(attrs ...field.AssignExpr) ISolutionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s solutionDo) Assign(attrs ...field.AssignExpr) ISolutionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s solutionDo) Joins(fields ...field.RelationField) ISolutionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s solutionDo) Preload(fields ...field.RelationField) ISolutionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s solutionDo) FirstOrInit() (*entity.Solution, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Solution), nil
	}
}

func (s solutionDo) FirstOrCreate() (*entity.Solution, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Solution), nil
	}
}

func (s solutionDo) FindByPage(offset int, limit int) (result []*entity.Solution, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s solutionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s solutionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s solutionDo) Delete(models ...*entity.Solution) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *solutionDo) withDO(do gen.Dao) *solutionDo {
	s.DO = *do.(*gen.DO)
	return s
}

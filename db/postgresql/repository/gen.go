// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Chapter        *chapter
	Follow         *follow
	Game           *game
	Lecture        *lecture
	Lesson         *lesson
	LessonAnswer   *lessonAnswer
	Problem        *problem
	Question       *question
	QuestionAnswer *questionAnswer
	Solution       *solution
	TestCase       *testCase
	User           *user
	UserToken      *userToken
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Chapter = &Q.Chapter
	Follow = &Q.Follow
	Game = &Q.Game
	Lecture = &Q.Lecture
	Lesson = &Q.Lesson
	LessonAnswer = &Q.LessonAnswer
	Problem = &Q.Problem
	Question = &Q.Question
	QuestionAnswer = &Q.QuestionAnswer
	Solution = &Q.Solution
	TestCase = &Q.TestCase
	User = &Q.User
	UserToken = &Q.UserToken
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Chapter:        newChapter(db, opts...),
		Follow:         newFollow(db, opts...),
		Game:           newGame(db, opts...),
		Lecture:        newLecture(db, opts...),
		Lesson:         newLesson(db, opts...),
		LessonAnswer:   newLessonAnswer(db, opts...),
		Problem:        newProblem(db, opts...),
		Question:       newQuestion(db, opts...),
		QuestionAnswer: newQuestionAnswer(db, opts...),
		Solution:       newSolution(db, opts...),
		TestCase:       newTestCase(db, opts...),
		User:           newUser(db, opts...),
		UserToken:      newUserToken(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Chapter        chapter
	Follow         follow
	Game           game
	Lecture        lecture
	Lesson         lesson
	LessonAnswer   lessonAnswer
	Problem        problem
	Question       question
	QuestionAnswer questionAnswer
	Solution       solution
	TestCase       testCase
	User           user
	UserToken      userToken
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Chapter:        q.Chapter.clone(db),
		Follow:         q.Follow.clone(db),
		Game:           q.Game.clone(db),
		Lecture:        q.Lecture.clone(db),
		Lesson:         q.Lesson.clone(db),
		LessonAnswer:   q.LessonAnswer.clone(db),
		Problem:        q.Problem.clone(db),
		Question:       q.Question.clone(db),
		QuestionAnswer: q.QuestionAnswer.clone(db),
		Solution:       q.Solution.clone(db),
		TestCase:       q.TestCase.clone(db),
		User:           q.User.clone(db),
		UserToken:      q.UserToken.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Chapter:        q.Chapter.replaceDB(db),
		Follow:         q.Follow.replaceDB(db),
		Game:           q.Game.replaceDB(db),
		Lecture:        q.Lecture.replaceDB(db),
		Lesson:         q.Lesson.replaceDB(db),
		LessonAnswer:   q.LessonAnswer.replaceDB(db),
		Problem:        q.Problem.replaceDB(db),
		Question:       q.Question.replaceDB(db),
		QuestionAnswer: q.QuestionAnswer.replaceDB(db),
		Solution:       q.Solution.replaceDB(db),
		TestCase:       q.TestCase.replaceDB(db),
		User:           q.User.replaceDB(db),
		UserToken:      q.UserToken.replaceDB(db),
	}
}

type queryCtx struct {
	Chapter        IChapterDo
	Follow         IFollowDo
	Game           IGameDo
	Lecture        ILectureDo
	Lesson         ILessonDo
	LessonAnswer   ILessonAnswerDo
	Problem        IProblemDo
	Question       IQuestionDo
	QuestionAnswer IQuestionAnswerDo
	Solution       ISolutionDo
	TestCase       ITestCaseDo
	User           IUserDo
	UserToken      IUserTokenDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Chapter:        q.Chapter.WithContext(ctx),
		Follow:         q.Follow.WithContext(ctx),
		Game:           q.Game.WithContext(ctx),
		Lecture:        q.Lecture.WithContext(ctx),
		Lesson:         q.Lesson.WithContext(ctx),
		LessonAnswer:   q.LessonAnswer.WithContext(ctx),
		Problem:        q.Problem.WithContext(ctx),
		Question:       q.Question.WithContext(ctx),
		QuestionAnswer: q.QuestionAnswer.WithContext(ctx),
		Solution:       q.Solution.WithContext(ctx),
		TestCase:       q.TestCase.WithContext(ctx),
		User:           q.User.WithContext(ctx),
		UserToken:      q.UserToken.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
